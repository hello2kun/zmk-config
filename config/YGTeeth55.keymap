/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
pin matrix changed
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT_LAYER 0
#define LAYER1 1
#define LAYER2 2
#define LAYER3 3
#define GAMELAYER 4

/ {

behaviors {
    lt: layer_tap {
        compatible = "zmk,behavior-hold-tap";
        quick-tap-ms = <185>;
        flavor = "balanced";
        };
};

behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

behaviors {
        htQck: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <130>;
            quick-tap-ms = <185>;
            require-prior-idle-ms = <130>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

 behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

 behaviors {
        bhmQck: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <105>;
            quick-tap-ms = <185>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N1>, <&kp EXCL>;
            };
       };

behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N2>, <&kp AT>;
            };
       };

behaviors {
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N3>, <&kp HASH>;
            };
       };

behaviors {
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N4>, <&kp DLLR>;
            };
       };

behaviors {
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N5>, <&kp PRCNT>;
            };
       };

behaviors {
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N6>, <&kp CARET>;
            };
       };

behaviors {
        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N7>, <&kp AMPS>;
            };
       };

behaviors {
        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N8>, <&kp STAR>;
            };
       };

behaviors {
        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N9>, <&kp LPAR>;
            };
       };

behaviors {
        td9: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp N0>, <&kp RPAR>;
            };
       };

behaviors {
        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp MINUS>, <&kp UNDER>;
            };
       };
behaviors {
        td11: tap_dance_11 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp PLUS>, <&kp EQUAL>;
            };
       };

behaviors {
        td12: tap_dance_12 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp ESC>, <&kp TILDE>, <&kp GRAVE>;
            };
       };

behaviors {
        td13: tap_dance_13 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp DOT>, <&kp COMMA>;
            };
       };

behaviors {
        td14: tap_dance_14 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp MINUS>, <&kp FSLH>;
            };

       };
behaviors {
        td15: tap_dance_15 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp PLUS>, <&kp STAR>;
            };
       };

/*
conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <0 1>;
            then-layer = <4>;
        };
    };
*/

combos
{
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 12>;
            bindings = <&kp TAB>;
            };

         combo_tilde {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TILDE>;
            };

        combo_1 {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp N1>;
            };

        combo_2 {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp N2>;
            };

        combo_3 {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp N3>;
            };

        combo_4 {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp N4>;
            };

        combo_5 {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp N5>;
            };

        combo_6 {
            timeout-ms = <50>;
            key-positions = <6 18>;
            bindings = <&kp N6>;
            };

        combo_7 {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp N7>;
            };

        combo_8 {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp N8>;
            };

        combo_9 {
            timeout-ms = <50>;
            key-positions = <9 21>;
            bindings = <&kp N9>;
            };

        combo_10 {
            timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp N0>;
            };

         combo_11 {
            timeout-ms = <50>;
            key-positions = <11 23>;
            bindings = <&kp MINUS>;
            };

        combo_12 {
            timeout-ms = <50>;
            key-positions = <51 52>;
            bindings = <&kp EQUAL>;
            };

        combo_exc {
            timeout-ms = <50>;
            key-positions = <13 25>;
            bindings = <&kp EXCL>;
            };

        combo_at {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp AT>;
            };

       combo_hash {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp HASH>;
            };

        combo_dllr {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp DLLR>;
            };

        combo_prcnt {
            timeout-ms = <50>;
            key-positions = <17 29>;
            bindings = <&kp PRCNT>;
            };

        combo_caret {
            timeout-ms = <50>;
            key-positions = <18 30>;
            bindings = <&kp CARET>;
            };

        combo_amps {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp AMPS>;
            };

        combo_star {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp STAR>;
            };

        combo_lpar {
            timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp LPAR>;
            };

        combo_rpar {
            timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp RPAR>;
            };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <23 35>;
            bindings = <&kp UNDER>;
            };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <52 53>;
            bindings = <&kp PLUS>;
            };

        combo_gamemode {
            timeout-ms = <50>;
            key-positions = <0 50>;
            bindings = <&tog GAMELAYER>;
            };

        combo_TaskManager {
            timeout-ms = <50>;
            key-positions = <0 36 50>;
            bindings = <&mcrTaskManager>;
            };

}; //end combo

macros
{
      mcr1: mcr1
      {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp H &kp E &kp L &kp L &kp O &kp N2 &kp K &kp U &kp N>;
      };

      mcr2: mcr2 
      {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp B &kp A &kp B &kp O &kp N0 &kp N9 &kp N7 &kp N9>
                     , <&macro_press &kp LSHFT>
                     , <&macro_tap &kp N1 &kp N2>
                     , <&macro_release &kp LSHFT>;
      };

      mcr3: mcr3
      {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp R &kp M &kp S &kp N0 &kp N9 &kp N7 &kp N9>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp N1 &kp N2>
                , <&macro_release &kp LSHFT>;
      };

      mcr4: mcr4
      {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>,
                <&macro_tap &kp N2>,
                <&macro_release &kp LSHFT>,

                <&macro_tap &kp LBKT>,

                <&macro_press &kp LSHFT>,
                <&macro_tap &kp T &kp A &kp SEMI>,
                <&macro_release &kp LSHFT>,

                <&macro_tap &kp RALT &kp Q &kp K &kp R &kp D &kp L &kp R &kp M &kp S &kp RBKT &kp SPACE>;
      };

        mcr5: mcr5
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };

        setBT0: setBT0
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 0>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,100,100)>;
        };

        setBT1: setBT1
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 1>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(120,100,100)>;
        };

        setBT2: setBT2
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 2>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(240,100,100)>;
        };

        setBT3: setBT3
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 3>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(60,100,100)>;
        };

        setBT4: setBT4
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 4>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(180,100,100)>;
        };

        mcrTaskManager: mcrTaskManager
        {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp DEL>
                , <&macro_release &kp LCTRL &kp LALT &kp DEL>;
        };

}; // end macro

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
//C0             C1                  C2        C3             C4                  C5                C6                C7               C8               C9               C10        C11              
//&gresc         &td0                &td1      &td2           &td3                &td4              &td5              &td6             &td7             &td8             &td9       &td10   
&kp ESC          &kp Q               &kp W     &kp E          &kp R               &kp T             &kp Y             &kp U            &kp I            &kp O            &kp P      &kp LBKT    
&kp BSPC         &kp A               &kp S     &kp D          &kp F               &kp G             &kp H             &kp J            &kp K            &kp L            &kp SEMI   &kp APOS   
&kp LSHFT        &kp Z               &kp X     &kp C          &kp V               &kp B             &kp N             &kp M            &kp COMMA        &kp DOT          &kp FSLH   &kp UP     
&kp LCTRL        &kp LGUI            &kp LALT  &lt LAYER2 RET &bhmQck LCTRL MINUS &bhmQck LALT PLUS &lt LAYER1 UNDER  &lt LAYER2 EQUAL &lt LAYER2 RALT  &lt LAYER1 RALT  &kp LEFT   &kp DOWN   
&lt LAYER1 SPACE &htQck LSHIFT SPACE &kp BSPC  &kp RBKT       &kp RET             &kp RSHFT         &kp RIGHT
            >;
        };

        layer1 {
            bindings = <
//C0        C1         C2        C3        C4         C5         C6       C7        C8         C9        C10        C11          
&kp TILDE   &td0       &td1      &td2      &td3       &td4       &td5     &td6      &td7       &td8      &td9       &td10 
&kp DEL     &td3       &td4      &td5      &td13      &td11      &td15    &trans    &trans     &trans    &trans     &trans
&trans      &td6       &td7      &td8      &td9       &td10      &td14    &trans    &trans     &trans    &trans     &kp PG_UP    
&trans      &trans     &trans    &trans    &mo LAYER2 &mo LAYER3 &trans   &trans    &trans     &kp HOME  &kp PG_DN    
&trans      &trans     &kp DEL   &td11     &kp PLUS &trans       &kp END
            >;
        };

        layer2 {
            bindings = <
//C0       C1           C2        C3         C4           C5           C6        C7              C8              C9              C10            C11              
&kp GRAVE &kp F1       &kp F2    &kp F3     &kp F4       &kp F5       &kp F6    &kp F7          &kp F8          &kp F9          &kp F10        &kp F11     
&kp CAPS  &mcr1        &mcr2     &mcr3      &mcr4        &mcr5        &trans    &trans          &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_ON &rgb_ug RGB_OFF
&trans    &setBT0      &setBT1   &setBT2    &setBT3      &setBT4      &trans    &rgb_ug RGB_EFF &rgb_ug RGB_BRD &rgb_ug RGB_BRI &bt BT_CLR     &kp C_VOL_UP 
&trans    &trans       &trans    &trans     &trans       &trans       &trans    &trans          &trans          &kp LANG2       &kp C_BRI_DN     &kp C_VOL_DN 
&trans    &trans       &kp BSLH  &kp F12    &kp PSCRN    &kp C_PP     &kp C_BRI_INC
            >;
        }; //Layer2 end

        layer3 {
            bindings = <
//C0      C1         C2        C3         C4        C5        C6        C7              C8              C9              C10            C11              
&trans    &trans    &trans    &trans     &trans     &trans    &trans    &trans          &trans          &trans          &trans         &trans    
&trans    &trans    &trans    &trans     &trans     &trans    &trans    &trans          &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_ON &rgb_ug RGB_OFF
&trans    &trans    &trans    &trans     &trans     &trans    &trans    &rgb_ug RGB_EFF &rgb_ug RGB_BRD &rgb_ug RGB_BRI &bt BT_CLR     &kp C_VOL_UP 
&trans    &trans    &trans    &trans     &trans     &trans    &trans    &trans          &trans          &kp LANG2       &kp C_PREV     &kp C_VOL_DN 
&trans    &trans    &trans    &trans     &trans     &trans    &trans
            >;
        }; //Layer3 end

        gamelayer {
            bindings = <
//C0         C1          C2          C3              C4         C5        C6       C7       C8               C9               C10        C11               
&kp ESC      &kp Q       &kp W       &kp E           &kp R      &kp T     &kp Y    &kp U    &kp I            &kp O            &kp P      &kp LBKT    
&kp BSPC     &kp A       &kp S       &kp D           &kp F      &kp G     &kp H    &kp J    &kp K            &kp L            &kp SEMI   &kp APOS   
&kp LSHFT    &kp Z       &kp X       &kp C           &kp V      &kp B     &kp N    &kp M    &kp COMMA        &kp DOT          &kp FSLH   &kp UP     
&kp LCTRL    &kp LGUI    &kp LALT    &lt LAYER2 RET  &kp N1     &kp N2    &kp N3   &kp N4   &lt LAYER2 RALT  &lt LAYER1 RALT  &kp LEFT   &kp DOWN
&kp SPACE    &kp LSHIFT  &trans      &kp RBKT        &kp RET    &kp RSHFT &kp RIGHT
            >;
        }; //game layer end


    }; //Keymap End
}; 
